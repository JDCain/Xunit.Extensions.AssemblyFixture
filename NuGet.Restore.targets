<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">

  <PropertyGroup>
    <NuGetPath Condition=" '$(NuGetPath)' == '' ">$(MSBuildThisFileDirectory).nuget</NuGetPath>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' ">
    <NuGet Condition=" '$(NuGet)' == '' ">$(NuGetPath)\NuGet.exe</NuGet>
    <CachedNuGet Condition=" '$(CachedNuGet)' == '' ">$(LocalAppData)\NuGet\NuGet.exe</CachedNuGet>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(OS)' != 'Windows_NT' ">
    <NuGet>nuget</NuGet>
  </PropertyGroup>

  <!-- Add current solution as one more solution to restore -->
  <ItemGroup>
    <RestoreSolution Include="$(SolutionPath)" Condition="'$(SolutionPath)' != ''" />
  </ItemGroup>

  <Target Name="RestorePackages" BeforeTargets="Build"
          DependsOnTargets="_GetNuGet;EnsureBeforeSolutionImport;RestoreSolutions"
          Condition=" '$(RestorePackages)' != 'false' " />

  <Target Name="EnsureBeforeSolutionImport">
    <Error Text="This targets file should ONLY be imported from a file named Before.$(SolutionFileName).targets alongside the solution file."
				Condition="!$(MSBuildProjectFile.Contains('$(SolutionFileName)'))" />
  </Target>

  <Target Name="RestoreSolutions" Inputs="@(RestoreSolution)" Outputs="%(RestoreSolution.Identity)-BATCH">
    <PropertyGroup>
      <!-- Normalizes paths to all be relative to the RestoreDir, to shorten the Exec Command length -->
      <_NuGet>$(NuGet.Replace('$(RestoreDir)', '').TrimStart('/').TrimStart('\'))</_NuGet>
    </PropertyGroup>
    
    <CreateProperty Value="%(RestoreSolution.FullPath)">
      <Output PropertyName="_RestoreSolution" TaskParameter="Value" />
    </CreateProperty>
    <CreateProperty Value="%(RestoreSolution.OutputDirectory)">
      <Output PropertyName="_RestoreOutput" TaskParameter="Value" />
    </CreateProperty>

    <PropertyGroup>
      <_RestoreSolution Condition=" '$(OS)' != 'Unix' ">$(_RestoreSolution.Replace('$(RestoreDir)', '').TrimStart('/').TrimStart('\'))</_RestoreSolution>
      <_RestoreOutput Condition=" '$(OS)' != 'Unix' And '$(_RestoreOutput)' != ''">$(_RestoreOutput.Replace('$(RestoreDir)', '').TrimStart('/').TrimStart('\'))</_RestoreOutput>
    </PropertyGroup>

    <Exec Command='"$(_NuGet)" Restore "$(_RestoreSolution)"'
          Condition="'$(_RestoreOutput)' == ''"
          WorkingDirectory="$(RestoreDir)"
          ContinueOnError="true" />

    <Exec Command='"$(_NuGet)" Restore "$(_RestoreSolution)" -OutputDirectory "$(_RestoreOutput)"'
          Condition="'$(_RestoreOutput)' != ''"
          WorkingDirectory="$(RestoreDir)"
          ContinueOnError="true" />
  </Target>


  <Target Name="_GetNuGet" Condition=" '$(OS)' == 'Windows_NT' And !Exists('$(NuGet)') ">
    <PropertyGroup>
      <PowerShell Condition=" '$(PowerShell)' == '' ">%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe</PowerShell>
    </PropertyGroup>

    <MakeDir Directories="$(NuGetPath)" Condition=" !Exists($(NuGetPath)) " />
    <Exec Command="&quot;$(PowerShell)&quot; -Command &quot;&amp; { (New-Object System.Net.WebClient).DownloadFile('http://nuget.org/nuget.exe', '$(CachedNuGet)') }&quot;"
          Condition=" !Exists($(NuGet)) And !Exists($(CachedNuGet)) " />
    <Copy SourceFiles="$(CachedNuGet)" DestinationFolder="$(NuGetPath)" Condition="!Exists($(NuGet))" />
  </Target>

</Project>
